openapi: 3.0.3
info:
  title: Policy & Support Copilot API (stub)
  version: 0.1.0
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: auth
    description: Authentication & session
  - name: kb
    description: Knowledge base ingestion
    description: Health check
  - name: search
  - name: chat
  - name: tickets
paths:
  /health:
    get:
      summary: Liveness check
      responses:
        '200':
          description: OK

  /auth/login:
    post:
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      tags: [auth]
      responses:
        '200':
          description: Auth tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  role: { type: string, enum: [agent, admin] }
        '401': { description: Invalid credentials }
  /auth/me:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  email: { type: string, format: email }
                  role: { type: string, enum: [agent, admin] }
        '401': { description: Unauthorized }
      tags: [auth]

  /auth/register:
    post:
      summary: Create a user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, role]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                role: { type: string, enum: [agent, admin] }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '409': { description: User already exists }
      tags: [auth]

  /auth/logout:
    post:
      summary: Logout (revoke current token)
      security:
        - bearerAuth: []
      responses:
        '204': { description: No Content }
        '401': { description: Unauthorized }
      tags: [auth]

  /auth/agents:
    get:
      summary: List agent users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Agent users
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        email: { type: string, format: email }
                        role: { type: string, enum: [agent, admin] }
                        full_name: { type: string }
                        created_at: { type: string, format: date-time }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
      tags: [auth]

  /kb/upload:
    post:
      tags: [kb]
      summary: Upload a document
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Uploaded

  /kb/ingest/{docId}:
    post:
      tags: [kb]
      summary: Ingest a document (extract → chunk → embed)
      parameters:
        - in: path
          name: docId
          schema: { type: string }
          required: true
      responses:
        '200':
          description: Ingested

  /search:
    get:
      tags: [search]
      summary: Search KB
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: top_k
          schema: { type: integer, default: 5 }
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        doc_id: { type: string }
                        chunk_idx: { type: integer }
                        text: { type: string }
                        score: { type: number }

  /chat:
    post:
      tags: [chat]
      summary: Ask a question grounded in KB (RAG)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
                top_k: { type: integer, default: 8 }
      responses:
        '200':
          description: Answer with citations
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer: { type: string }
                  citations:
                    type: array
                    items:
                      type: object
                      properties:
                        doc: { type: string }
                        section: { type: string }
                        snippet: { type: string }
                  confidence: { type: number }
                  unanswerable: { type: boolean }
  /tickets/triage:
    post:
      tags: [tickets]
      summary: Triage a support ticket and draft a grounded reply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject: { type: string }
                body: { type: string }
      responses:
        '200':
          description: Triage result
          content:
            application/json:
              schema:
                type: object
                properties:
                  category: { type: string }
                  priority: { type: string, enum: [High, Medium, Low] }
                  suggested_reply: { type: string }
                  supports:
                    type: array
                    items:
                      type: object
                      properties:
                        doc: { type: string }
                        section: { type: string }
                        snippet: { type: string }
                  confidence: { type: number }
                  action: { type: string, enum: [AUTO_RESOLVE, AUTO_ACK_ONLY, ESCALATE] }
                  sla:
                    type: object
                    properties:
                      first_response_minutes: { type: integer }
                      resolution_hours: { type: integer }


